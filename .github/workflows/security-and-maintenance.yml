name: Security and Maintenance

on:
  workflow_dispatch:
    inputs:
      run_dependency_audit:
        description: 'Run dependency security audit'
        required: false
        default: true
        type: boolean
      run_snyk_scan:
        description: 'Run Snyk security scan'
        required: false
        default: true
        type: boolean
      run_codeql:
        description: 'Run CodeQL analysis'
        required: false
        default: true
        type: boolean
      run_dependency_updates:
        description: 'Check for dependency updates'
        required: false
        default: true
        type: boolean
      run_license_check:
        description: 'Run license compliance check'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8.x'

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.run_dependency_audit == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run npm audit
        id: audit
        run: |
          pnpm audit --audit-level moderate --json > audit-results.json || true
          cat audit-results.json
          
      - name: Check for high/critical vulnerabilities
        run: |
          HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          
          if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "::error::Found $HIGH_VULNS high and $CRITICAL_VULNS critical vulnerabilities"
            exit 1
          fi
          
      - name: Upload audit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: audit-results
          path: audit-results.json
          retention-days: 30

  snyk-security-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.run_snyk_scan == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk-results.json
          
      - name: Upload Snyk results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: snyk-results
          path: snyk-results.json
          retention-days: 30

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.run_codeql == 'true'
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  dependency-update-check:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    if: github.event.inputs.run_dependency_updates == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Check for outdated dependencies
        run: |
          pnpm outdated --format json > outdated.json || true
          cat outdated.json
          
      - name: Create issue for outdated dependencies
        if: ${{ github.event_name == 'schedule' }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            try {
              const outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));
              
              if (Object.keys(outdated).length > 0) {
                const body = `
                
                The following dependencies have updates available:
                
                \`\`\`json
                ${JSON.stringify(outdated, null, 2)}
                \`\`\`
                
                Please review and update these dependencies as appropriate.
                
                *This issue was automatically created by the security and maintenance workflow.*`;
                
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `Dependency Updates Available - ${new Date().toISOString().split('T')[0]}`,
                  body: body,
                  labels: ['dependencies', 'maintenance']
                });
              }
            } catch (error) {
              console.log('No outdated dependencies or error reading file:', error.message);
            }

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    if: github.event.inputs.run_license_check == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install license checker
        run: pnpm add -g license-checker
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Check licenses
        run: |
          license-checker --json --excludePrivatePackages > licenses.json
          
      - name: Validate licenses
        run: |

          PROBLEMATIC_LICENSES=("GPL" "AGPL" "LGPL" "CPAL" "EPL")
          
          for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if grep -q "$license" licenses.json; then
              echo "::warning::Found potentially problematic license: $license"
            fi
          done
          
      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.json
          retention-days: 30


